generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                   @id @default(autoincrement())
  email            String
  firstName        String
  lastName         String
  basicCredentials UserBasicCredentials?
  ownedDepartments Department[]
  userProjects     UserProject[]
  managedCustomers Customer[]
  historyList      History[]
  comments         Comment[]
  issues           UserIssue[]
  deleted          Boolean               @default(false)
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @default(now())
}

model UserBasicCredentials {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  email     String   @unique
  password  String
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Department {
  id        Int       @id @default(autoincrement())
  name      String
  owner     User?     @relation(fields: [ownerId], references: [id])
  ownerId   Int?
  projects  Project[]
  deleted   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
}

model Market {
  id          Int        @id @default(autoincrement())
  name        String
  countryCode String
  country     String
  customers   Customer[]
  projects    Project[]
  deleted     Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
}

model Customer {
  id        Int       @id @default(autoincrement())
  name      String
  address   String?
  market    Market    @relation(fields: [marketId], references: [id])
  marketId  Int
  projects  Project[]
  manager   User      @relation(fields: [managerId], references: [id])
  managerId Int
  deleted   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
}

enum ProjectType {
  SOFTWARE
  MANAGEMENT
  SCRUM
  KANBAN
}

model Project {
  id           Int           @id @default(autoincrement())
  name         String
  key          String
  projectType  ProjectType
  avatar       String?
  description  String?       @db.Text()
  market       Market        @relation(fields: [marketId], references: [id])
  marketId     Int
  customer     Customer      @relation(fields: [customerId], references: [id])
  customerId   Int
  department   Department    @relation(fields: [departmentId], references: [id])
  departmentId Int
  projectUsers UserProject[]
  issue        Issue[]
  startDate    DateTime      @default(now())
  deadline     DateTime?
  cost         Decimal       @default(0)
  value        Decimal
  deleted      Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
}

model UserProject {
  id             Int      @id @default(autoincrement())
  project        Project  @relation(fields: [projectId], references: [id])
  projectId      Int
  user           User     @relation(fields: [userId], references: [id])
  userId         Int
  projectLead    Boolean  @default(false)
  projectManager Boolean  @default(false)
  deleted        Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
}

model Attachment {
  id        Int      @id @default(autoincrement())
  path      String
  name      String
  bucketKey String?
  size      Int?
  issue     Issue?   @relation(fields: [issueId], references: [id])
  issueId   Int?
  type      String?
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

enum Priority {
  HIGHEST
  HIGH
  MEDIUM
  LOW
  LOWEST
}

enum UserIssueRelation {
  REPORTER
  ASSIGNEE
  OWNER
  WATCHER
}

model UserIssue {
  id        Int               @id @default(autoincrement())
  relation  UserIssueRelation
  user      User              @relation(fields: [userId], references: [id])
  userId    Int
  issue     Issue             @relation(fields: [issueId], references: [id])
  issueId   Int
  deleted   Boolean           @default(false)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @default(now())
}

model Issue {
  id                   Int             @id @default(autoincrement())
  name                 String
  description          String?
  priority             Priority
  effortPoints         Float?
  originalEffortPoints Float?
  assigneeId           Int
  Attachment           Attachment[]
  project              Project         @relation(fields: [projectId], references: [id])
  projectId            Int
  statusType           StatusType      @relation(fields: [statusTypeId], references: [id])
  statusTypeId         Int
  issueType            IssueType       @relation(fields: [issueTypeId], references: [id])
  issueTypeId          Int
  comments             Comment[]
  historyList          History[]
  users                UserIssue[]
  parentIssueList      IssueRelation[] @relation("ParentIssues")
  childIssueList       IssueRelation[] @relation("ChildIssues")
  deleted              Boolean         @default(false)
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @default(now())
}

enum IssueRelationType {
  EPIC
  BLOCKED
  BLOCKS
  CLONED
  CLONES
  DUPLICATED
  DUPLICATES
  RELATES
  PARENT
}

model IssueRelation {
  id            Int               @id @default(autoincrement())
  type          IssueRelationType
  parentIssue   Issue             @relation("ParentIssues", fields: [parentIssueId], references: [id])
  parentIssueId Int
  childIssue    Issue             @relation("ChildIssues", fields: [childIssueId], references: [id])
  childIssueId  Int
  deleted       Boolean           @default(false)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @default(now())
}

model StatusType {
  id                 Int                 @id @default(autoincrement())
  name               String
  issues             Issue[]
  historyStatusTypes HistoryStatusType[]
  deleted            Boolean             @default(false)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now())
}

model HistoryStatusType {
  id           Int        @id @default(autoincrement())
  statusType   StatusType @relation(fields: [statusTypeId], references: [id])
  statusTypeId Int
  history      History    @relation(fields: [historyId], references: [id])
  historyId    Int
  deleted      Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
}

model History {
  id                 Int                 @id @default(autoincrement())
  action             String
  field              String
  user               User                @relation(fields: [userId], references: [id])
  userId             Int
  historyStatusTypes HistoryStatusType[]
  issue              Issue               @relation(fields: [issueId], references: [id])
  issueId            Int
  deleted            Boolean             @default(false)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now())
}

model Comment {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  text      String
  issue     Issue    @relation(fields: [issueId], references: [id])
  issueId   Int
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model IssueType {
  id        Int      @id @default(autoincrement())
  name      String
  color     String
  icon      String
  issues    Issue[]
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
